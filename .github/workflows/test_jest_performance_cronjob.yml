name: 'Test: Jest Performance Tests Cronjob'

on:
  push:
    branches:
      - Piotrk39/refactor.move-all-k6-tests-to-jest
  schedule:
    - cron: '42 1 * * 1-5'
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

env:
  workingDirectory: services/121-service/
  EXTERNAL_121_SERVICE_URL: http://localhost:3000

jobs:
  path-filter:
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.filter.outputs.should_skip }}
    steps:
      - uses: actions/checkout@v5
        if: github.event_name == 'pull_request'
        with:
          filter: blob:none
          fetch-depth: 0

      - uses: leavesster/pull-request-path-filter@v0.2
        if: github.event_name == 'pull_request'
        id: 'filter'
        with:
          paths: |
            - .github/workflows/test_service_api.yml
            - .github/actions/build-service/action.yml
            - services/.env.example
            - services/121-service/**
            - services/mock-service/**
            - '!**.md'

  performance-test-shard:
    runs-on: ubuntu-latest
    needs: path-filter
    if: ${{ needs.path-filter.outputs.should_skip != 'true' }}

    strategy:
      fail-fast: false
      matrix:
        shard: ['1', '2', '3', '4', '5', '6', '7', '8']
        include:
          - shard: '1'
            test_name: 'BulkUpdate32kRegistrations.test.ts'
            duplicate_number: '15'
          - shard: '2'
            test_name: 'FindDuplicates100kRegistrations.test.ts'
            duplicate_number: '17'
          - shard: '3'
            test_name: 'GetProgramWithManyAttributes.test.ts'
            duplicate_number: '5'
          - shard: '4'
            test_name: 'Payment100kRegistrationIntersolveVisa.test.ts'
            duplicate_number: '17'
          - shard: '5'
            test_name: 'Payment100kRegistrationSafaricom.test.ts'
            duplicate_number: '12'
          - shard: '6'
            test_name: 'PerformanceDuringPayment.test.ts'
            duplicate_number: '15'
          - shard: '7'
            test_name: 'StatusChangePaymentInLargeProgram.test.ts'
            duplicate_number: '15'
          - shard: '8'
            test_name: 'Import1000Registrations.test.ts'
            duplicate_number: ''

    steps:
      - name: Check out repository code
        uses: actions/checkout@v5

      - name: Set ENV-variables for test-environment
        run: |
          cp ./services/.env.example services/.env
          grep -v "^#\|^$" services/.env.example >> $GITHUB_ENV

      - name: Run Services with Docker
        run: |
          npm run start:services:ci

      - name: Run performance test - ${{ matrix.test_name }}
        working-directory: ${{ env.workingDirectory }}
        run: |
          if [ -n "${{ matrix.duplicate_number }}" ]; then
            docker compose exec -e DUPLICATE_NUMBER=${{ matrix.duplicate_number }} 121-service npm run test:integration:all -t ${{ matrix.test_name }}
          else
            docker compose exec 121-service npm run test:integration:all -t ${{ matrix.test_name }}
          fi

      - name: Docker logs
        if: always()
        uses: jwalton/gh-docker-logs@v2

  performance-test-shard-resolution:
    runs-on: ubuntu-latest
    needs: [performance-test-shard]
    if: always()
    steps:
      - name: Check test results - FAILURE
        if: contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled')
        run: |
          echo "Performance tests have failed." >> $GITHUB_STEP_SUMMARY
          echo "Test results: ${{ toJson(needs.*.result) }}" >> $GITHUB_STEP_SUMMARY
          exit 1

      - name: Check test results - SUCCESS
        if: ${{ !(contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled')) }}
        run: |
          echo "All performance tests have successfully passed." >> $GITHUB_STEP_SUMMARY
          echo "Test results: ${{ toJson(needs.*.result) }}" >> $GITHUB_STEP_SUMMARY

      - name: Microsoft Teams Notification
        if: always()
        uses: tlolkema/simple-teams-message@main
        env:
          JOB_STATUS_WITH_NICE_EMOJI: ${{ job.status == 'success' && '✅ Success' || '❌ Failed' }}
        with:
          message_title: 'Jest Performance Tests Cronjob'
          message_description: 'Job status: ${{ env.JOB_STATUS_WITH_NICE_EMOJI }}'
          webhook: ${{ secrets.MSTEAMS_WEBHOOK }}
