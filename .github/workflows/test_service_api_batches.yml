# See: https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions

name: 'Test Service: Unit & Integration Tests'

on:
  workflow_dispatch:
  merge_group:
    types: [checks_requested]
  pull_request:
    paths:
      - .github/workflows/test_service_api_batches.yml
      - .github/actions/build-service/action.yml
      - services/.env.example
      - services/121-service/**
      - services/mock-service/**
      - '!**.md'

defaults:
  run:
    working-directory: services

jobs:
  test_prep:
    runs-on: ubuntu-latest
    outputs:
      services_version_hash: ${{ steps.services_version.outputs.hash }}

    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Generate version-hash of all services code
        id: services_version
        working-directory: ./
        run: echo "hash=${{ hashFiles('services/**') }}" >> $GITHUB_OUTPUT

      - name: Set ENV-variables for test-environment
        run: cp .env.example .env

  build:
    runs-on: ubuntu-latest
    needs: test_prep
    strategy:
      matrix:
        service-container: ['121-service', 'mock-service']
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Build and Docker Image
        run: docker build --target production --tag ${{ matrix.service-container }}:${{ needs.test_prep.outputs.services_version_hash }} ${{ matrix.service-container }}

      - name: Save Docker Image
        run: docker save ${{ matrix.service-container }}:${{ needs.test_prep.outputs.services_version_hash }} -o ${{ matrix.service-container }}-${{ needs.test_prep.outputs.services_version_hash }}.tar

      - name: Upload Docker image
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.service-container }}-${{ needs.test_prep.outputs.services_version_hash }}
          path: services/${{ matrix.service-container }}-${{ needs.test_prep.outputs.services_version_hash }}.tar

  test_batches:
    runs-on: ubuntu-latest
    needs:
      - test_prep
      - build
    strategy:
      matrix:
        batch: ['1/4', '2/4', '3/4', '4/4']

    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Set ENV-variables for test-environment
        run: cp .env.example .env

      - name: Download Docker images
        uses: actions/download-artifact@v4
        with:
          path: services

      - name: Load Docker images
        run: |
          docker load -i 121-service-${{ needs.test_prep.outputs.services_version_hash }}.tar
          docker load -i mock-service-${{ needs.test_prep.outputs.services_version_hash }}.tar

      - name: Run Containers with Docker
        run: docker compose --file=docker-compose.yml up --detach --wait --wait-timeout 300 --quiet-pull --no-recreate --no-build

      - name: Check that no new migrations are necessary
        if: ${{ matrix.batch == '1/4' }}
        run: docker compose exec 121-service npm run test:migration

      - name: Run integration tests with Jest
        run: docker compose exec 121-service npm run test:integration:all -- --shard=${{ matrix.batch }}

      - name: Docker logs
        if: always()
        uses: jwalton/gh-docker-logs@v2

  test:
    runs-on: ubuntu-latest
    needs:
      - test_batches
    steps:
      - name: Finish
        run: echo 'Done?!'
