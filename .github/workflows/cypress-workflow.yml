# See: https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions

name: 'Cypress Full Integration Tests'

on:
  workflow_dispatch:
  pull_request:
    branches:
      - 'master'
    paths:
      - '.github/workflows/cypress-workflow.yml'
      - 'interfaces/tests/*'
      - '!*.md'
  push:
    branches:
      - 'release/*'
    paths:
      - '.github/workflows/cypress-workflow.yml'
      - 'interfaces/tests/*'
      - '!*.md'

jobs:
  build_interface_aw:
    runs-on: ubuntu-latest
    name: 'Build Interface: AW-App'
    if: github.event.pull_request.draft != true
    steps:
      - uses: actions/checkout@v3

      - name: Check build cache for AW-App
        uses: actions/cache@v3
        id: cache_build_interface_aw
        with:
          path: interfaces/AW-App
          key: ${{ runner.os }}-interface-aw-${{ hashFiles('interfaces/AW-App') }}

      - name: Use Node.js
        if: steps.cache_build_interface_aw.outputs.cache-hit != 'true'
        uses: actions/setup-node@v3
        with:
          node-version-file: 'interfaces/AW-App/.node-version'
          cache: 'npm'
          cache-dependency-path: interfaces/AW-App/package-lock.json

      - name: Build Angular app
        if: steps.cache_build_interface_aw.outputs.cache-hit != 'true'
        working-directory: ./interfaces/AW-App
        env:
          NG_URL_121_SERVICE_API: http://localhost:3000/api
        run: |
          npm ci --no-audit --no-fund
          npm run build:prod

  build_interface_pa:
    runs-on: ubuntu-latest
    name: 'Build Interface: PA-App'
    if: github.event.pull_request.draft != true
    steps:
      - uses: actions/checkout@v3

      - name: Check build cache for PA-App
        uses: actions/cache@v3
        id: cache_build_interface_pa
        with:
          path: interfaces/PA-App
          key: ${{ runner.os }}-interface-pa-${{ hashFiles('interfaces/PA-App') }}

      - name: Use Node.js
        if: steps.cache_build_interface_pa.outputs.cache-hit != 'true'
        uses: actions/setup-node@v3
        with:
          node-version-file: 'interfaces/PA-App/.node-version'
          cache: 'npm'
          cache-dependency-path: interfaces/PA-App/package-lock.json

      - name: Build Angular app
        if: steps.cache_build_interface_pa.outputs.cache-hit != 'true'
        working-directory: ./interfaces/PA-App
        env:
          NG_URL_121_SERVICE_API: http://localhost:3000/api
        run: |
          npm ci --no-audit --no-fund
          npm run build:prod

  build_interface_ho:
    runs-on: ubuntu-latest
    name: 'Build Interface: HO-Portal'
    if: github.event.pull_request.draft != true
    steps:
      - uses: actions/checkout@v3

      - name: Check build cache for HO-Portal
        uses: actions/cache@v3
        id: cache_build_interface_ho
        with:
          path: interfaces/HO-Portal
          key: ${{ runner.os }}-interface-ho-${{ hashFiles('interfaces/HO-Portal') }}

      - name: Use Node.js
        if: steps.cache_build_interface_ho.outputs.cache-hit != 'true'
        uses: actions/setup-node@v3
        with:
          node-version-file: 'interfaces/HO-Portal/.node-version'
          cache: 'npm'
          cache-dependency-path: interfaces/HO-Portal/package-lock.json

      - name: Build Angular app
        if: steps.cache_build_interface_ho.outputs.cache-hit != 'true'
        working-directory: ./interfaces/HO-Portal
        env:
          NG_URL_121_SERVICE_API: http://localhost:3000/api
        run: |
          npm ci --no-audit --no-fund
          npm run build:prod

  test:
    needs:
      - build_interface_aw
      - build_interface_pa
      - build_interface_ho
    name: Run Cypress Tests
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft != true
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Check build cache for AW-App
        uses: actions/cache@v3
        with:
          path: interfaces/AW-App
          key: ${{ runner.os }}-interface-aw-${{ hashFiles('interfaces/AW-App') }}

      - name: Check build cache for PA-App
        uses: actions/cache@v3
        with:
          path: interfaces/PA-App
          key: ${{ runner.os }}-interface-pa-${{ hashFiles('interfaces/PA-App') }}

      - name: Check build cache for HO-Portal
        uses: actions/cache@v3
        with:
          path: interfaces/HO-Portal
          key: ${{ runner.os }}-interface-ho-${{ hashFiles('interfaces/HO-Portal') }}

      - name: Build services
        uses: actions/cache@v3
        id: cache_build_services
        with:
          path: services
          key: ${{ runner.os }}-services-${{ hashFiles('services') }}

      - name: Create .env variables file
        if: steps.cache_build_services.outputs.cache-hit != 'true'
        run: |
          /bin/sed -i '/^POSTGRES_HOST=/s/=.*/=121db/' ./services/.env.example
          /bin/sed -i '/^POSTGRES_USER=/s/=.*/=global121/' ./services/.env.example
          /bin/sed -i '/^POSTGRES_PASSWORD=/s/=.*/=global121/' ./services/.env.example
          /bin/sed -i '/^POSTGRES_DBNAME=/s/=.*/=global121/' ./services/.env.example
          /bin/sed -i '/^NODE_ENV=/s/=.*/=development/' ./services/.env.example
          /bin/sed -i '/^ENV_NAME=/s/=.*/=Cypress/' ./services/.env.example
          /bin/sed -i '/^RESET_SECRET=/s/=.*/=password/' ./services/.env.example
          /bin/sed -i '/^TWILIO_SID=/s/=.*/=AC/' ./services/.env.example
          /bin/sed -i '/^MOCK_TWILIO=/s/=.*/=TRUE/' ./services/.env.example
          /bin/sed -i '/^MOCK_INTERSOLVE=/s/=.*/=TRUE/' ./services/.env.example
          /bin/sed -i '/^EXTERNAL_121_SERVICE_URL=/s/=.*/=http:\/\/localhost:3000\//' ./services/.env.example
          /bin/sed -i '/^GENERIC_THROTTLING_TTL=/s/=.*/=60/' ./services/.env.example
          /bin/sed -i '/^GENERIC_THROTTLING_LIMIT=/s/=.*/=1200/' ./services/.env.example
          /bin/sed -i '/^HIGH_THROTTLING_TTL=/s/=.*/=60/' ./services/.env.example
          /bin/sed -i '/^HIGH_THROTTLING_LIMIT=/s/=.*/=100/' ./services/.env.example
          cp ./services/.env.example services/.env

      - name: Build containers
        if: steps.cache_build_services.outputs.cache-hit != 'true'
        working-directory: ./services
        run: docker compose -f docker-compose.yml -f docker-compose.ci.yml build

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version-file: 'interfaces/tests/.node-version'
          cache: 'npm'
          cache-dependency-path: interfaces/tests/package-lock.json

      - name: Prepare test environment
        run: |
          npm install http-server --global --no-save --no-audit --no-fund

      - name: Run integration tests with Cypress
        # See documentation: https://github.com/cypress-io/github-action/#readme
        uses: cypress-io/github-action@v5
        with:
          browser: chrome
          config: 'video=false,screenshotOnRunFailure=false,defaultCommandTimeout=30000,requestTimeout=30000'
          working-directory: ./interfaces/tests
          start: |
            npx http-server ../AW-App/www/    --silent -c0 --port 8080 --proxy http://localhost:8080/?
            npx http-server ../PA-App/www/    --silent -c0 --port 8008 --proxy http://localhost:8008/?
            npx http-server ../HO-Portal/www/ --silent -c0 --port 8888 --proxy http://localhost:8888/?
            npm run start:services:ci
          wait-on-timeout: 900
          wait-on: 'http://localhost:3000/api/health/health, http://localhost:8008/, http://localhost:8080/, http://localhost:8888/'

      - name: Dump docker logs on failure
        if: failure()
        uses: jwalton/gh-docker-logs@v2
