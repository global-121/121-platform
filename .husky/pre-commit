#!/usr/bin/env bash
#
# git hook to run a command before actually committing when running `git commit`:
#

ORANGE='\033[0;33m'
NC='\033[0m' # No Color

log() {
  printf "${ORANGE}[pre-commit]${NC} $1\n"
}

log "Running custom pre-commit hook defined in ./husky/pre-commit"

# Prevent committing to "main"-branch:
if [ "$(git rev-parse --abbrev-ref HEAD)" = "main" ]; then
  log "You shouldn't commit directly to the main branch."
  log "Create a feature branch:  git branch new-branch-name"
  log "Then reset 'main':        git reset --hard origin/main"
  log "And continue to work:     git checkout new-branch-name"
  exit 1
fi


check_if_need_to_lint() {
  if git diff --cached --name-only | grep --quiet "$1*"
  then
    log "Found changes, linting $1"
    cd "$(git rev-parse --show-toplevel)" || exit
    npm run lint:fix --if-present --prefix "$1"
    log "Finished linting $1"
  fi
}

log "Running prettier on staged docs & static files"
npx lint-staged

# Include all packages/applications that support an `npm run lint` task:
check_if_need_to_lint "e2e/"
check_if_need_to_lint "interfaces/Portal/"
check_if_need_to_lint "services/121-service/"
check_if_need_to_lint "services/mock-service/"

log "All done"
