import { IntersolveVisaCustomerEntity } from '@121-service/src/payments/fsp-integration/intersolve-visa/entities/intersolve-visa-customer.entity';
import { InjectRepository } from '@nestjs/typeorm';
import { Equal, Repository } from 'typeorm';

//TODO: Discuss with Ruben if this Custom Repository needs to be "scoped", as in, based on ScopedRepository or something. If yes, then how? :)
export class IntersolveVisaCustomerRepository extends Repository<IntersolveVisaCustomerEntity> {
  constructor(
    @InjectRepository(IntersolveVisaCustomerEntity)
    private baseRepository: Repository<IntersolveVisaCustomerEntity>,
  ) {
    super(
      baseRepository.target,
      baseRepository.manager,
      baseRepository.queryRunner,
    );
  }

  public async getIntersolveCustomerAndWalletsByRegistrationId(
    registrationId: number,
  ): Promise<IntersolveVisaCustomerEntity> {
    // TODO: Test if this query works, it was generated by CoPilot.
    return await this.baseRepository.findOne({
      where: { registrationId: Equal(registrationId) },
      relations: ['visaWallets'],
    });
  }
}
