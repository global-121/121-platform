/**
 * 121-service [DEV]
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0.0-dev
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';


// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';



@Injectable({
  providedIn: 'root'
})
export class MetricsService {

    protected basePath = 'http://localhost:3000';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string|string[], @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            const firstBasePath = Array.isArray(basePath) ? basePath[0] : undefined;
            if (firstBasePath != undefined) {
                basePath = firstBasePath;
            }

            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }


    // @ts-ignore
    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        } else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }

    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
        if (value == null) {
            return httpParams;
        }

        if (typeof value === "object") {
            if (Array.isArray(value)) {
                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            } else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, (value as Date).toISOString().substring(0, 10));
                } else {
                   throw Error("key may not be null if value is Date");
                }
            } else {
                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(
                    httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        } else if (key != null) {
            httpParams = httpParams.append(key, value);
        } else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }

    /**
     * [SCOPED] Retrieve data for export. Filters only work for export type all-people-affected
     * @param programId 
     * @param exportType 
     * @param page Page number to retrieve.If you provide invalid value the default page number will applied         &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; 1           &lt;/p&gt;         &lt;p&gt;              &lt;b&gt;Default Value: &lt;/b&gt; 1           &lt;/p&gt;         
     * @param limit Number of records per page.       &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; 20           &lt;/p&gt;       &lt;p&gt;              &lt;b&gt;Default Value: &lt;/b&gt; 20           &lt;/p&gt;       &lt;p&gt;              &lt;b&gt;Max Value: &lt;/b&gt; 0           &lt;/p&gt;        If provided value is greater than max value, max value will be applied.       
     * @param filterReferenceId Filter by referenceId query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.referenceId&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.referenceId&#x3D;$not:$like:John Doe&amp;filter.referenceId&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$eq&lt;/li&gt; &lt;li&gt;$in&lt;/li&gt; &lt;li&gt;$ilike&lt;/li&gt; &lt;li&gt;$null&lt;/li&gt;&lt;/ul&gt;
     * @param filterStatus Filter by status query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.status&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.status&#x3D;$not:$like:John Doe&amp;filter.status&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$eq&lt;/li&gt; &lt;li&gt;$in&lt;/li&gt; &lt;li&gt;$ilike&lt;/li&gt; &lt;li&gt;$null&lt;/li&gt;&lt;/ul&gt;
     * @param filterId Filter by id query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.id&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.id&#x3D;$not:$like:John Doe&amp;filter.id&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$eq&lt;/li&gt; &lt;li&gt;$null&lt;/li&gt;&lt;/ul&gt;
     * @param filterRegistrationCreatedDate Filter by registrationCreatedDate query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.registrationCreatedDate&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.registrationCreatedDate&#x3D;$not:$like:John Doe&amp;filter.registrationCreatedDate&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$eq&lt;/li&gt; &lt;li&gt;$in&lt;/li&gt; &lt;li&gt;$ilike&lt;/li&gt; &lt;li&gt;$null&lt;/li&gt;&lt;/ul&gt;
     * @param filterPhoneNumber Filter by phoneNumber query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.phoneNumber&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.phoneNumber&#x3D;$not:$like:John Doe&amp;filter.phoneNumber&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$eq&lt;/li&gt; &lt;li&gt;$in&lt;/li&gt; &lt;li&gt;$ilike&lt;/li&gt; &lt;li&gt;$null&lt;/li&gt;&lt;/ul&gt;
     * @param filterPreferredLanguage Filter by preferredLanguage query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.preferredLanguage&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.preferredLanguage&#x3D;$not:$like:John Doe&amp;filter.preferredLanguage&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$eq&lt;/li&gt; &lt;li&gt;$in&lt;/li&gt; &lt;li&gt;$ilike&lt;/li&gt; &lt;li&gt;$null&lt;/li&gt;&lt;/ul&gt;
     * @param filterInclusionScore Filter by inclusionScore query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.inclusionScore&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.inclusionScore&#x3D;$not:$like:John Doe&amp;filter.inclusionScore&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$eq&lt;/li&gt; &lt;li&gt;$null&lt;/li&gt;&lt;/ul&gt;
     * @param filterPaymentAmountMultiplier Filter by paymentAmountMultiplier query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.paymentAmountMultiplier&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.paymentAmountMultiplier&#x3D;$not:$like:John Doe&amp;filter.paymentAmountMultiplier&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$eq&lt;/li&gt; &lt;li&gt;$null&lt;/li&gt;&lt;/ul&gt;
     * @param filterFinancialServiceProvider Filter by financialServiceProvider query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.financialServiceProvider&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.financialServiceProvider&#x3D;$not:$like:John Doe&amp;filter.financialServiceProvider&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$eq&lt;/li&gt; &lt;li&gt;$in&lt;/li&gt; &lt;li&gt;$ilike&lt;/li&gt; &lt;li&gt;$null&lt;/li&gt;&lt;/ul&gt;
     * @param filterFspDisplayName Filter by fspDisplayName query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.fspDisplayName&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.fspDisplayName&#x3D;$not:$like:John Doe&amp;filter.fspDisplayName&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$eq&lt;/li&gt; &lt;li&gt;$in&lt;/li&gt; &lt;li&gt;$ilike&lt;/li&gt; &lt;li&gt;$null&lt;/li&gt;&lt;/ul&gt;
     * @param filterRegistrationProgramId Filter by registrationProgramId query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.registrationProgramId&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.registrationProgramId&#x3D;$not:$like:John Doe&amp;filter.registrationProgramId&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$eq&lt;/li&gt; &lt;li&gt;$null&lt;/li&gt;&lt;/ul&gt;
     * @param filterMaxPayments Filter by maxPayments query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.maxPayments&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.maxPayments&#x3D;$not:$like:John Doe&amp;filter.maxPayments&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$eq&lt;/li&gt; &lt;li&gt;$null&lt;/li&gt;&lt;/ul&gt;
     * @param filterPaymentCount Filter by paymentCount query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.paymentCount&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.paymentCount&#x3D;$not:$like:John Doe&amp;filter.paymentCount&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$eq&lt;/li&gt; &lt;li&gt;$null&lt;/li&gt;&lt;/ul&gt;
     * @param filterPaymentCountRemaining Filter by paymentCountRemaining query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.paymentCountRemaining&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.paymentCountRemaining&#x3D;$not:$like:John Doe&amp;filter.paymentCountRemaining&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$eq&lt;/li&gt; &lt;li&gt;$null&lt;/li&gt;&lt;/ul&gt;
     * @param filterPersonAffectedSequence Filter by personAffectedSequence query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.personAffectedSequence&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.personAffectedSequence&#x3D;$not:$like:John Doe&amp;filter.personAffectedSequence&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$eq&lt;/li&gt; &lt;li&gt;$in&lt;/li&gt; &lt;li&gt;$ilike&lt;/li&gt; &lt;li&gt;$null&lt;/li&gt;&lt;/ul&gt;
     * @param filterLastMessageStatus Filter by lastMessageStatus query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.lastMessageStatus&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.lastMessageStatus&#x3D;$not:$like:John Doe&amp;filter.lastMessageStatus&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$eq&lt;/li&gt; &lt;li&gt;$in&lt;/li&gt; &lt;li&gt;$ilike&lt;/li&gt; &lt;li&gt;$null&lt;/li&gt;&lt;/ul&gt;
     * @param filterFailedPayment Filter by failedPayment query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.failedPayment&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.failedPayment&#x3D;$not:$like:John Doe&amp;filter.failedPayment&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$eq&lt;/li&gt; &lt;li&gt;$null&lt;/li&gt;&lt;/ul&gt;
     * @param filterWaitingPayment Filter by waitingPayment query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.waitingPayment&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.waitingPayment&#x3D;$not:$like:John Doe&amp;filter.waitingPayment&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$eq&lt;/li&gt; &lt;li&gt;$null&lt;/li&gt;&lt;/ul&gt;
     * @param filterSuccessPayment Filter by successPayment query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.successPayment&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.successPayment&#x3D;$not:$like:John Doe&amp;filter.successPayment&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$eq&lt;/li&gt; &lt;li&gt;$null&lt;/li&gt;&lt;/ul&gt;
     * @param filterNotYetSentPayment Filter by notYetSentPayment query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.notYetSentPayment&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.notYetSentPayment&#x3D;$not:$like:John Doe&amp;filter.notYetSentPayment&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$eq&lt;/li&gt; &lt;li&gt;$null&lt;/li&gt;&lt;/ul&gt;
     * @param sortBy Parameter to sort by.       &lt;p&gt;To sort by multiple fields, just provide query param multiple types. The order in url defines an order of sorting&lt;/p&gt;       &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; fieldName:DIRECTION           &lt;/p&gt;       &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; sortBy&#x3D;id:DESC&amp;sortBy&#x3D;createdAt:ASC           &lt;/p&gt;       &lt;p&gt;              &lt;b&gt;Default Value: &lt;/b&gt; No default sorting specified, the result order is not guaranteed           &lt;/p&gt;       &lt;h4&gt;Available Fields&lt;/h4&gt;&lt;ul&gt;&lt;/ul&gt;       
     * @param search Search term to filter result values         &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; John           &lt;/p&gt;         &lt;p&gt;              &lt;b&gt;Default Value: &lt;/b&gt; No default value           &lt;/p&gt;         
     * @param searchBy List of fields to search by term to filter result values         &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; data.(value)           &lt;/p&gt;         &lt;p&gt;              &lt;b&gt;Default Value: &lt;/b&gt; By default all fields mentioned below will be used to search by term           &lt;/p&gt;         &lt;h4&gt;Available Fields&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;data.(value)&lt;/li&gt;&lt;/ul&gt;         
     * @param format Format to return the data in. Options are \&quot;json\&quot; and \&quot;xlsx\&quot;. Defaults to \&quot;json\&quot; if not specified.
     * @param maxPayment 
     * @param minPayment 
     * @param toDate 
     * @param fromDate 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public metricsControllerGetExportList(programId: number, exportType: 'all-people-affected' | 'included' | 'payment' | 'unused-vouchers' | 'vouchers-with-balance' | 'to-cancel-vouchers' | 'duplicates' | 'card-balances', page?: number, limit?: number, filterReferenceId?: Array<string>, filterStatus?: Array<string>, filterId?: Array<string>, filterRegistrationCreatedDate?: Array<string>, filterPhoneNumber?: Array<string>, filterPreferredLanguage?: Array<string>, filterInclusionScore?: Array<string>, filterPaymentAmountMultiplier?: Array<string>, filterFinancialServiceProvider?: Array<string>, filterFspDisplayName?: Array<string>, filterRegistrationProgramId?: Array<string>, filterMaxPayments?: Array<string>, filterPaymentCount?: Array<string>, filterPaymentCountRemaining?: Array<string>, filterPersonAffectedSequence?: Array<string>, filterLastMessageStatus?: Array<string>, filterFailedPayment?: Array<string>, filterWaitingPayment?: Array<string>, filterSuccessPayment?: Array<string>, filterNotYetSentPayment?: Array<string>, sortBy?: Array<number>, search?: string, searchBy?: Array<string>, format?: 'json' | 'xlsx', maxPayment?: number, minPayment?: number, toDate?: string, fromDate?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public metricsControllerGetExportList(programId: number, exportType: 'all-people-affected' | 'included' | 'payment' | 'unused-vouchers' | 'vouchers-with-balance' | 'to-cancel-vouchers' | 'duplicates' | 'card-balances', page?: number, limit?: number, filterReferenceId?: Array<string>, filterStatus?: Array<string>, filterId?: Array<string>, filterRegistrationCreatedDate?: Array<string>, filterPhoneNumber?: Array<string>, filterPreferredLanguage?: Array<string>, filterInclusionScore?: Array<string>, filterPaymentAmountMultiplier?: Array<string>, filterFinancialServiceProvider?: Array<string>, filterFspDisplayName?: Array<string>, filterRegistrationProgramId?: Array<string>, filterMaxPayments?: Array<string>, filterPaymentCount?: Array<string>, filterPaymentCountRemaining?: Array<string>, filterPersonAffectedSequence?: Array<string>, filterLastMessageStatus?: Array<string>, filterFailedPayment?: Array<string>, filterWaitingPayment?: Array<string>, filterSuccessPayment?: Array<string>, filterNotYetSentPayment?: Array<string>, sortBy?: Array<number>, search?: string, searchBy?: Array<string>, format?: 'json' | 'xlsx', maxPayment?: number, minPayment?: number, toDate?: string, fromDate?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public metricsControllerGetExportList(programId: number, exportType: 'all-people-affected' | 'included' | 'payment' | 'unused-vouchers' | 'vouchers-with-balance' | 'to-cancel-vouchers' | 'duplicates' | 'card-balances', page?: number, limit?: number, filterReferenceId?: Array<string>, filterStatus?: Array<string>, filterId?: Array<string>, filterRegistrationCreatedDate?: Array<string>, filterPhoneNumber?: Array<string>, filterPreferredLanguage?: Array<string>, filterInclusionScore?: Array<string>, filterPaymentAmountMultiplier?: Array<string>, filterFinancialServiceProvider?: Array<string>, filterFspDisplayName?: Array<string>, filterRegistrationProgramId?: Array<string>, filterMaxPayments?: Array<string>, filterPaymentCount?: Array<string>, filterPaymentCountRemaining?: Array<string>, filterPersonAffectedSequence?: Array<string>, filterLastMessageStatus?: Array<string>, filterFailedPayment?: Array<string>, filterWaitingPayment?: Array<string>, filterSuccessPayment?: Array<string>, filterNotYetSentPayment?: Array<string>, sortBy?: Array<number>, search?: string, searchBy?: Array<string>, format?: 'json' | 'xlsx', maxPayment?: number, minPayment?: number, toDate?: string, fromDate?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public metricsControllerGetExportList(programId: number, exportType: 'all-people-affected' | 'included' | 'payment' | 'unused-vouchers' | 'vouchers-with-balance' | 'to-cancel-vouchers' | 'duplicates' | 'card-balances', page?: number, limit?: number, filterReferenceId?: Array<string>, filterStatus?: Array<string>, filterId?: Array<string>, filterRegistrationCreatedDate?: Array<string>, filterPhoneNumber?: Array<string>, filterPreferredLanguage?: Array<string>, filterInclusionScore?: Array<string>, filterPaymentAmountMultiplier?: Array<string>, filterFinancialServiceProvider?: Array<string>, filterFspDisplayName?: Array<string>, filterRegistrationProgramId?: Array<string>, filterMaxPayments?: Array<string>, filterPaymentCount?: Array<string>, filterPaymentCountRemaining?: Array<string>, filterPersonAffectedSequence?: Array<string>, filterLastMessageStatus?: Array<string>, filterFailedPayment?: Array<string>, filterWaitingPayment?: Array<string>, filterSuccessPayment?: Array<string>, filterNotYetSentPayment?: Array<string>, sortBy?: Array<number>, search?: string, searchBy?: Array<string>, format?: 'json' | 'xlsx', maxPayment?: number, minPayment?: number, toDate?: string, fromDate?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (programId === null || programId === undefined) {
            throw new Error('Required parameter programId was null or undefined when calling metricsControllerGetExportList.');
        }
        if (exportType === null || exportType === undefined) {
            throw new Error('Required parameter exportType was null or undefined when calling metricsControllerGetExportList.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (page !== undefined && page !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>page, 'page');
        }
        if (limit !== undefined && limit !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>limit, 'limit');
        }
        if (filterReferenceId) {
            filterReferenceId.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'filter.referenceId');
            })
        }
        if (filterStatus) {
            filterStatus.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'filter.status');
            })
        }
        if (filterId) {
            filterId.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'filter.id');
            })
        }
        if (filterRegistrationCreatedDate) {
            filterRegistrationCreatedDate.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'filter.registrationCreatedDate');
            })
        }
        if (filterPhoneNumber) {
            filterPhoneNumber.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'filter.phoneNumber');
            })
        }
        if (filterPreferredLanguage) {
            filterPreferredLanguage.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'filter.preferredLanguage');
            })
        }
        if (filterInclusionScore) {
            filterInclusionScore.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'filter.inclusionScore');
            })
        }
        if (filterPaymentAmountMultiplier) {
            filterPaymentAmountMultiplier.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'filter.paymentAmountMultiplier');
            })
        }
        if (filterFinancialServiceProvider) {
            filterFinancialServiceProvider.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'filter.financialServiceProvider');
            })
        }
        if (filterFspDisplayName) {
            filterFspDisplayName.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'filter.fspDisplayName');
            })
        }
        if (filterRegistrationProgramId) {
            filterRegistrationProgramId.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'filter.registrationProgramId');
            })
        }
        if (filterMaxPayments) {
            filterMaxPayments.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'filter.maxPayments');
            })
        }
        if (filterPaymentCount) {
            filterPaymentCount.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'filter.paymentCount');
            })
        }
        if (filterPaymentCountRemaining) {
            filterPaymentCountRemaining.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'filter.paymentCountRemaining');
            })
        }
        if (filterPersonAffectedSequence) {
            filterPersonAffectedSequence.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'filter.personAffectedSequence');
            })
        }
        if (filterLastMessageStatus) {
            filterLastMessageStatus.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'filter.lastMessageStatus');
            })
        }
        if (filterFailedPayment) {
            filterFailedPayment.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'filter.failedPayment');
            })
        }
        if (filterWaitingPayment) {
            filterWaitingPayment.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'filter.waitingPayment');
            })
        }
        if (filterSuccessPayment) {
            filterSuccessPayment.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'filter.successPayment');
            })
        }
        if (filterNotYetSentPayment) {
            filterNotYetSentPayment.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'filter.notYetSentPayment');
            })
        }
        if (sortBy) {
            sortBy.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'sortBy');
            })
        }
        if (search !== undefined && search !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>search, 'search');
        }
        if (searchBy) {
            searchBy.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'searchBy');
            })
        }
        if (format !== undefined && format !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>format, 'format');
        }
        if (maxPayment !== undefined && maxPayment !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxPayment, 'maxPayment');
        }
        if (minPayment !== undefined && minPayment !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minPayment, 'minPayment');
        }
        if (toDate !== undefined && toDate !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>toDate, 'toDate');
        }
        if (fromDate !== undefined && fromDate !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>fromDate, 'fromDate');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/programs/${this.configuration.encodeParam({name: "programId", value: programId, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: undefined})}/metrics/export-list/${this.configuration.encodeParam({name: "exportType", value: exportType, in: "path", style: "simple", explode: false, dataType: "'all-people-affected' | 'included' | 'payment' | 'unused-vouchers' | 'vouchers-with-balance' | 'to-cancel-vouchers' | 'duplicates' | 'card-balances'", dataFormat: undefined})}`;
        return this.httpClient.request<any>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * [SCOPED] Get payments with state sums by program-id
     * @param programId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public metricsControllerGetPaymentsWithStateSums(programId: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public metricsControllerGetPaymentsWithStateSums(programId: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public metricsControllerGetPaymentsWithStateSums(programId: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public metricsControllerGetPaymentsWithStateSums(programId: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (programId === null || programId === undefined) {
            throw new Error('Required parameter programId was null or undefined when calling metricsControllerGetPaymentsWithStateSums.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/programs/${this.configuration.encodeParam({name: "programId", value: programId, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: undefined})}/metrics/payment-state-sums`;
        return this.httpClient.request<any>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * [SCOPED] Get program stats summary
     * @param programId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public metricsControllerGetProgramStats(programId: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public metricsControllerGetProgramStats(programId: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public metricsControllerGetProgramStats(programId: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public metricsControllerGetProgramStats(programId: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (programId === null || programId === undefined) {
            throw new Error('Required parameter programId was null or undefined when calling metricsControllerGetProgramStats.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/programs/${this.configuration.encodeParam({name: "programId", value: programId, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: undefined})}/metrics/program-stats-summary`;
        return this.httpClient.request<any>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * [SCOPED] Get registration statuses with count
     * @param programId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public metricsControllerGetRegistrationStatusStats(programId: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public metricsControllerGetRegistrationStatusStats(programId: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public metricsControllerGetRegistrationStatusStats(programId: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public metricsControllerGetRegistrationStatusStats(programId: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (programId === null || programId === undefined) {
            throw new Error('Required parameter programId was null or undefined when calling metricsControllerGetRegistrationStatusStats.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/programs/${this.configuration.encodeParam({name: "programId", value: programId, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: undefined})}/metrics/registration-status`;
        return this.httpClient.request<any>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get list of vouchers to cancel, only used by admin
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public metricsControllerGetToCancelVouchers(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public metricsControllerGetToCancelVouchers(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public metricsControllerGetToCancelVouchers(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public metricsControllerGetToCancelVouchers(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any> {

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/metrics/to-cancel-vouchers`;
        return this.httpClient.request<any>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

}
